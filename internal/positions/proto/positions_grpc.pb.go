// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PositionServiceClient is the client API for PositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionServiceClient interface {
	GetEntriesPositionsFromScenarioId(ctx context.Context, in *GetEntriesPositionsFromScenarioIdRequest, opts ...grpc.CallOption) (PositionService_GetEntriesPositionsFromScenarioIdClient, error)
}

type positionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionServiceClient(cc grpc.ClientConnInterface) PositionServiceClient {
	return &positionServiceClient{cc}
}

func (c *positionServiceClient) GetEntriesPositionsFromScenarioId(ctx context.Context, in *GetEntriesPositionsFromScenarioIdRequest, opts ...grpc.CallOption) (PositionService_GetEntriesPositionsFromScenarioIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &PositionService_ServiceDesc.Streams[0], "/positions.PositionService/GetEntriesPositionsFromScenarioId", opts...)
	if err != nil {
		return nil, err
	}
	x := &positionServiceGetEntriesPositionsFromScenarioIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PositionService_GetEntriesPositionsFromScenarioIdClient interface {
	Recv() (*GetEntriesPositionsFromScenarioIdResponse, error)
	grpc.ClientStream
}

type positionServiceGetEntriesPositionsFromScenarioIdClient struct {
	grpc.ClientStream
}

func (x *positionServiceGetEntriesPositionsFromScenarioIdClient) Recv() (*GetEntriesPositionsFromScenarioIdResponse, error) {
	m := new(GetEntriesPositionsFromScenarioIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PositionServiceServer is the server API for PositionService service.
// All implementations must embed UnimplementedPositionServiceServer
// for forward compatibility
type PositionServiceServer interface {
	GetEntriesPositionsFromScenarioId(*GetEntriesPositionsFromScenarioIdRequest, PositionService_GetEntriesPositionsFromScenarioIdServer) error
	mustEmbedUnimplementedPositionServiceServer()
}

// UnimplementedPositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPositionServiceServer struct {
}

func (UnimplementedPositionServiceServer) GetEntriesPositionsFromScenarioId(*GetEntriesPositionsFromScenarioIdRequest, PositionService_GetEntriesPositionsFromScenarioIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEntriesPositionsFromScenarioId not implemented")
}
func (UnimplementedPositionServiceServer) mustEmbedUnimplementedPositionServiceServer() {}

// UnsafePositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionServiceServer will
// result in compilation errors.
type UnsafePositionServiceServer interface {
	mustEmbedUnimplementedPositionServiceServer()
}

func RegisterPositionServiceServer(s grpc.ServiceRegistrar, srv PositionServiceServer) {
	s.RegisterService(&PositionService_ServiceDesc, srv)
}

func _PositionService_GetEntriesPositionsFromScenarioId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEntriesPositionsFromScenarioIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PositionServiceServer).GetEntriesPositionsFromScenarioId(m, &positionServiceGetEntriesPositionsFromScenarioIdServer{stream})
}

type PositionService_GetEntriesPositionsFromScenarioIdServer interface {
	Send(*GetEntriesPositionsFromScenarioIdResponse) error
	grpc.ServerStream
}

type positionServiceGetEntriesPositionsFromScenarioIdServer struct {
	grpc.ServerStream
}

func (x *positionServiceGetEntriesPositionsFromScenarioIdServer) Send(m *GetEntriesPositionsFromScenarioIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PositionService_ServiceDesc is the grpc.ServiceDesc for PositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "positions.PositionService",
	HandlerType: (*PositionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEntriesPositionsFromScenarioId",
			Handler:       _PositionService_GetEntriesPositionsFromScenarioId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/positions/proto/positions.proto",
}
